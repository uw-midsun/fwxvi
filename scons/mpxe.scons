from scons.common import parse_config
from pathlib import Path

Import("VARS")

TARGET = VARS.get("TARGET")
PLATFORM = VARS.get("PLATFORM")
env = VARS.get("env")

# Clone the C env and clear C flags
cxx_env = env.Clone()
cxx_env['CCFLAGS'] = ['-DMS_PLATFORM_X86', '-D_GNU_SOURCE',]
cxx_env['LINK'] = 'g++'

ROOT = Dir('#')

BUILD_DIR = ROOT.Dir('build').Dir(PLATFORM)
BIN_DIR = BUILD_DIR.Dir('bin')
OBJ_DIR = BUILD_DIR.Dir('obj')
LIB_BIN_DIR = BIN_DIR.Dir('libraries')

MPXE_DIR = ROOT.Dir('mpxe')
MPXE_SERVER_DIR = MPXE_DIR.Dir('server')
AUTOGEN_DIR = ROOT.Dir("autogen")

def src(path):
    # return all source files within a path
    srcs = []
    for file in path.glob("src/*.[cs]") + path.glob("src/*.cc") + path.glob("src/*.cpp") + \
               path.glob(f"src/{PLATFORM}/*.[cs]") + path.glob(f"src/{PLATFORM}/*.cc") + path.glob(f"src/{PLATFORM}/*.cpp"):
        if file.abspath.startswith(OBJ_DIR.abspath):
            srcs.append(file)
        else:
            srcs.append(OBJ_DIR.File(file.path))
    return srcs

def inc(path):
    # return all include directories within a path
    return [path.Dir("inc"), path.Dir("inc").Dir(PLATFORM)]

###########################################################
# File autogeneration from jinja templates
###########################################################
autogen_sources = list(Path(AUTOGEN_DIR.abspath).rglob("*"))
autogen_sources += list(Path(ROOT.abspath).glob("can/boards/*"))

outputs = [
    MPXE_SERVER_DIR.Dir("app").Dir("inc").File("can_scheduler.h"),
    MPXE_SERVER_DIR.Dir("app").Dir("src").File("can_scheduler.cc"),
    MPXE_SERVER_DIR.Dir("app").Dir("src").File("can_message_handler.cc"),
]

env.Command(
    outputs,
    autogen_sources,
    f"python3 -m autogen simulation_app -o {MPXE_SERVER_DIR.Dir('app')}"
)

env.Command(
    [MPXE_SERVER_DIR.Dir("app").Dir("inc").File("system_can.h")],
    autogen_sources,
    f"python3 -m autogen system_can -o {MPXE_SERVER_DIR.Dir('app').Dir('inc')}"
)

###########################################################
# MPXE Library Generation
###########################################################

def create_mpxe_common_lib():
    mpxe_common_dir = MPXE_DIR.Dir("common")

    # Convert Path objects to SCons File nodes
    common_srcs = src(mpxe_common_dir)
    common_incs = inc(mpxe_common_dir)

    # Create the common library
    common_lib = cxx_env.Library(
        target=LIB_BIN_DIR.File('libmpxe_common.a'),
        source=common_srcs,
        LIBS=env['LIBS'],
        LIBPATH=[LIB_BIN_DIR],
        CPPPATH=env['CPPPATH'] + common_incs,
        CXXFLAGS=env['CXXFLAGS'],
    )

    # Create alias
    Alias('mpxe_common', common_lib)

    return common_lib

###########################################################
# Server Compilation
###########################################################

lib_deps = []

mpxe_server_app_dir = MPXE_SERVER_DIR.Dir("app")
mpxe_server_util_dir = MPXE_SERVER_DIR.Dir("utils")
mpxe_common_dir = MPXE_DIR.Dir("common")

common_lib = create_mpxe_common_lib()

server_srcs = []
server_srcs += src(mpxe_server_app_dir)
server_srcs += src(mpxe_server_util_dir)
server_srcs += src(mpxe_common_dir)

server_incs = []
server_incs += inc(mpxe_server_app_dir)
server_incs += inc(mpxe_server_util_dir)
server_incs += inc(mpxe_common_dir)

lib_deps += ['libmpxe_common.a']

# Debug output for server sources and libraries
for testfile in server_srcs:
    print(f"Server Sources: {testfile.name}")
print("Library Dependencies:", lib_deps)

# Ensure target is being built
target = cxx_env.Program(
    target=BIN_DIR.Dir("projects").File('mpxe'),
    source=server_srcs,
    CPPPATH=cxx_env['CPPPATH'] + server_incs,
    LIBS=cxx_env['LIBS'] + lib_deps * 2,
    LIBPATH=[LIB_BIN_DIR],
    CCFLAGS=cxx_env['CCFLAGS'],
)
print(f"{cxx_env['LINKFLAGS']}")
server_alias = Alias('mpxe_server', target)
Default(server_alias)
