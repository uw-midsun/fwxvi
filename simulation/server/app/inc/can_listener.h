#pragma once

/************************************************************************************************
 * @file   can_listener.h
 *
 * @brief  Header file defining the CanListener class
 *
 * @date   2025-01-04
 * @author Aryan Kashem
 ************************************************************************************************/

/* Standard library Headers */
#include <atomic>
#include <cstring>
#include <string>
#include <unordered_map>
#include <vector>

/* Inter-component Headers */
#include <arpa/inet.h>
#include <fcntl.h>
#include <linux/can.h>
#include <linux/can/bcm.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>

#include <nlohmann/json.hpp>

/* Intra-component Headers */

/**
 * @defgroup CanListener
 * @brief    Raw SocketCAN abstraction class
 * @{
 */

/**
 * @class   CanListener
 * @brief   Class that handles message listening over a SocketCAN interface
 * @details This class is responsible listening to CAN messages and updating a JSON file
 *          This class shall cache the latest data and update the JSON every UPDATE_CAN_JSON_PERIOD_MS
 */
class CanListener {
 private:
  const std::string CAN_INTERFACE_NAME = "vcan0";  /**< SocketCAN interface name */
  const std::string CAN_JSON_NAME = "CANListener"; /**< CAN JSON file name */

  static const constexpr unsigned int UPDATE_CAN_JSON_PERIOD_MS = 1000U; /**< JSON Update period in milliseconds */

  std::unordered_map<std::string, nlohmann::json> m_canInfo; /**< Hash-map to cache the latest CAN data */

  pthread_mutex_t m_mutex;    /**< Mutex to protect m_canInfo */
  pthread_t m_listenCanBusId; /**< Thread Id for listening to the CAN bus */
  pthread_t m_updateJSONId;   /**< Thread Id for updating the CAN JSON */

  int m_rawCanSocket;              /**< Raw SocketCAN FD */
  std::atomic<bool> m_isListening; /** Boolean flag to track the CAN bus connection status */

  /**
   * @brief   Handles receiving new CAN messages
   * @details This function is called by the listeningCanBusProcedure
   *          This function is autogenerated
   */
  void canMessageHandler(uint32_t id, const uint8_t *data);

 public:
  /**
   * @brief   Constructs a CanListener object
   * @details Initializes the CanListener. The constructor sets up internal variables
   *          The constructor shall intialize the mutex
   */
  CanListener();

  /**
   * @brief   Destructs a CanListener object
   * @details Initializes the CanListener. The constructor sets up internal variables
   *          The destructor shall release the mutex
   */
  ~CanListener();

  /**
   * @brief   Initiate the CAN Bus listener on a Raw SocketCAN port
   * @details This shall start the listenCanBusProcedure and updateJSONProcedure
   */
  void listenCanBus();

  /**
   * @brief   Thread procedure for listening to the CAN bus
   * @details This thread shall store the latest CAN data in the m_canInfo unordered map
   */
  void listenCanBusProcedure();

  /**
   * @brief   Thread procedure for updating the global JSON object
   * @details This thread shall update the JSON at UPDATE_CAN_JSON_PERIOD_MS
   */
  void updateJSONProcedure();
};

/** @} */
