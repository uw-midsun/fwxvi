name: CI

on:
  # Run on all pull requests and all pushes to main
  push:
    branches: [main]
  pull_request:
  # Allow running this workflow manually
  workflow_dispatch:

env:
  DEFINES: "LOG_LEVEL=LOG_LEVEL_WARN"
  GCC_VERSION: "11.3-2022.02"
  GCC_ARCH: "x86_64-linux"

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 12
    
    env:
      GCC_PATH: gcc-arm-none-eabi-${{ env.GCC_VERSION }}
      GCC_ARCHIVE: gcc-arm-none-eabi-${{ env.GCC_VERSION }}-${{ env.GCC_ARCH }}.tar.bz2
      GCC_URL: https://developer.arm.com/-/media/Files/downloads/gnu/${{ env.GCC_VERSION }}/gcc-arm-none-eabi-${{ env.GCC_VERSION }}-${{ env.GCC_ARCH }}.tar.bz2
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Cache STM32 toolchain
        id: cache-toolchain
        uses: actions/cache@v3
        with:
          path: ~/gcc-arm-none-eabi-${{ env.GCC_VERSION }}
          key: ${{ runner.os }}-gcc-arm-${{ env.GCC_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget make gcc clang clang-format python3-pip
          wget https://raw.githubusercontent.com/uw-midsun/box/master/requirements.sh
          chmod +x ./requirements.sh
          sudo ./requirements.sh
          pip install -r requirements.txt --upgrade

      - name: Install STM32 toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          cd ${HOME}
          wget -nv ${{ env.GCC_URL }}
          tar -xjf ${{ env.GCC_ARCHIVE }}
          rm ${{ env.GCC_ARCHIVE }}
      
      - name: Add toolchain to PATH
        run: echo "${HOME}/${{ env.GCC_PATH }}/bin" >> $GITHUB_PATH

      - name: Force PATH update
        run: hash -r

      - name: Verify toolchain installation
        run: |
          arm-none-eabi-gcc --version
          arm-none-eabi-objcopy --version
          arm-none-eabi-objdump --version
          arm-none-eabi-size --version
          arm-none-eabi-gcc-ar --version
          arm-none-eabi-gdb --version
          gcc --version
          make --version
          clang --version
          clang-format --version
          pylint --version

      - name: Format check
        run: |
          scons format
          if [[ $(git diff --name-only) ]]; then
            echo "::error::Unformatted files detected:"
            git diff --name-only
            exit 1
          fi

      - name: Lint check
        run: |
          scons lint || {
            echo "::error::Lint check failed"
            exit 1
          }

      - name: Build STM32 firmware
        run: scons --platform=arm --define="${DEFINES}"

      # - name: Setup test environment
      #   if: false  # Commented out for now, uncomment when ready for testing
      #   run: |
      #     sudo apt-get install -y linux-modules-extra-$(uname -r)
      #     sudo modprobe can
      #     sudo modprobe can_raw
      #     sudo modprobe vcan
      #     sudo ip link add dev vcan0 type vcan
      #     sudo ip link set up vcan0

      # - name: Build and test x86
      #   run: |
      #     scons --platform=x86 --define="${DEFINES}"
      #     scons test --platform=x86 --define="${DEFINES}"
      #     # Add make pytest_all when ready