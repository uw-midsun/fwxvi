/************************************************************************************************
 * @file   can_scheduler.cc
 *
 * @brief  Source file defining the CanScheduler class
 *
 * @date   2025-09-17
 * @author Aryan Kashem
 ************************************************************************************************/

/** @warning  This file is autogenerated */

/* Standard library Headers */
#include <cstring>
#include <iostream>

/* Inter-component Headers */
#include "system_can.h"

/* Intra-component Headers */
#include "can_scheduler.h"

CanScheduler::CanScheduler() {
  m_isConnected = false;
  m_bcmCanSocket = -1;
}

void CanScheduler::scheduleCanMessages() {
  canFastCycleBCM.msg_head.opcode = TX_SETUP;
  canFastCycleBCM.msg_head.can_id = FAST_CYCLE_BCM_ID;
  canFastCycleBCM.msg_head.flags = SETTIMER | STARTTIMER;
  canFastCycleBCM.msg_head.nframes = NUM_FAST_CYCLE_MESSAGES;
  canFastCycleBCM.msg_head.count = 0;

  canFastCycleBCM.msg_head.ival1.tv_sec = 0U;
  canFastCycleBCM.msg_head.ival1.tv_usec = 0U;
  canFastCycleBCM.msg_head.ival2.tv_sec = FAST_CYCLE_SPEED_MS / 1000U;
  canFastCycleBCM.msg_head.ival2.tv_usec = (FAST_CYCLE_SPEED_MS % 1000U) * 1000U;

  canFastCycleBCM.frame[FAST_CAN_COMMUNICATION_FAST_ONE_SHOT_MSG_FRAME_INDEX].can_id = SYSTEM_CAN_MESSAGE_CAN_COMMUNICATION_FAST_ONE_SHOT_MSG;
  canFastCycleBCM.frame[FAST_CAN_COMMUNICATION_FAST_ONE_SHOT_MSG_FRAME_INDEX].can_dlc = 4U;
  memset(canFastCycleBCM.frame[FAST_CAN_COMMUNICATION_FAST_ONE_SHOT_MSG_FRAME_INDEX].data, 0U, MAX_MESSAGE_LENGTH);

  if (write(m_bcmCanSocket, &canFastCycleBCM, sizeof(canFastCycleBCM)) < 0) {
    throw std::runtime_error("Failed to schedule CAN BCM Fast cycle messages");
  }

  canMediumCycleBCM.msg_head.opcode = TX_SETUP;
  canMediumCycleBCM.msg_head.can_id = MEDIUM_CYCLE_BCM_ID;
  canMediumCycleBCM.msg_head.flags = SETTIMER | STARTTIMER;
  canMediumCycleBCM.msg_head.nframes = NUM_MEDIUM_CYCLE_MESSAGES;
  canMediumCycleBCM.msg_head.count = 0;

  canMediumCycleBCM.msg_head.ival1.tv_sec = 0U;
  canMediumCycleBCM.msg_head.ival1.tv_usec = 0U;
  canMediumCycleBCM.msg_head.ival2.tv_sec = MEDIUM_CYCLE_SPEED_MS / 1000U;
  canMediumCycleBCM.msg_head.ival2.tv_usec = (MEDIUM_CYCLE_SPEED_MS % 1000U) * 1000U;

  canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].can_id = SYSTEM_CAN_MESSAGE_REAR_CONTROLLER_TEST_DATA;
  canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].can_dlc = 7U;
  memset(canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].data, 0U, MAX_MESSAGE_LENGTH);
  canMediumCycleBCM.frame[MEDIUM_IMU_GYRO_DATA_FRAME_INDEX].can_id = SYSTEM_CAN_MESSAGE_IMU_GYRO_DATA;
  canMediumCycleBCM.frame[MEDIUM_IMU_GYRO_DATA_FRAME_INDEX].can_dlc = 6U;
  memset(canMediumCycleBCM.frame[MEDIUM_IMU_GYRO_DATA_FRAME_INDEX].data, 0U, MAX_MESSAGE_LENGTH);
  canMediumCycleBCM.frame[MEDIUM_IMU_ACCEL_DATA_FRAME_INDEX].can_id = SYSTEM_CAN_MESSAGE_IMU_ACCEL_DATA;
  canMediumCycleBCM.frame[MEDIUM_IMU_ACCEL_DATA_FRAME_INDEX].can_dlc = 6U;
  memset(canMediumCycleBCM.frame[MEDIUM_IMU_ACCEL_DATA_FRAME_INDEX].data, 0U, MAX_MESSAGE_LENGTH);
  canMediumCycleBCM.frame[MEDIUM_CAN_COMMUNICATION_MEDIUM_ONE_SHOT_MSG_FRAME_INDEX].can_id = SYSTEM_CAN_MESSAGE_CAN_COMMUNICATION_MEDIUM_ONE_SHOT_MSG;
  canMediumCycleBCM.frame[MEDIUM_CAN_COMMUNICATION_MEDIUM_ONE_SHOT_MSG_FRAME_INDEX].can_dlc = 4U;
  memset(canMediumCycleBCM.frame[MEDIUM_CAN_COMMUNICATION_MEDIUM_ONE_SHOT_MSG_FRAME_INDEX].data, 0U, MAX_MESSAGE_LENGTH);
  canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].can_id = SYSTEM_CAN_MESSAGE_STEERING_STEERING_STATE;
  canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].can_dlc = 8U;
  memset(canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].data, 0U, MAX_MESSAGE_LENGTH);
  canMediumCycleBCM.frame[MEDIUM_FRONT_CONTROLLER_FRONT_CONTROLLER_PEDAL_DATA_FRAME_INDEX].can_id = SYSTEM_CAN_MESSAGE_FRONT_CONTROLLER_FRONT_CONTROLLER_PEDAL_DATA;
  canMediumCycleBCM.frame[MEDIUM_FRONT_CONTROLLER_FRONT_CONTROLLER_PEDAL_DATA_FRAME_INDEX].can_dlc = 5U;
  memset(canMediumCycleBCM.frame[MEDIUM_FRONT_CONTROLLER_FRONT_CONTROLLER_PEDAL_DATA_FRAME_INDEX].data, 0U, MAX_MESSAGE_LENGTH);

  if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
    throw std::runtime_error("Failed to schedule CAN BCM Medium cycle messages");
  }

  canSlowCycleBCM.msg_head.opcode = TX_SETUP;
  canSlowCycleBCM.msg_head.can_id = SLOW_CYCLE_BCM_ID;
  canSlowCycleBCM.msg_head.flags = SETTIMER | STARTTIMER;
  canSlowCycleBCM.msg_head.nframes = NUM_SLOW_CYCLE_MESSAGES;
  canSlowCycleBCM.msg_head.count = 0;

  canSlowCycleBCM.msg_head.ival1.tv_sec = 0U;
  canSlowCycleBCM.msg_head.ival1.tv_usec = 0U;
  canSlowCycleBCM.msg_head.ival2.tv_sec = SLOW_CYCLE_SPEED_MS / 1000U;
  canSlowCycleBCM.msg_head.ival2.tv_usec = (SLOW_CYCLE_SPEED_MS % 1000U) * 1000U;

  canSlowCycleBCM.frame[SLOW_CAN_COMMUNICATION_SLOW_ONE_SHOT_MSG_FRAME_INDEX].can_id = SYSTEM_CAN_MESSAGE_CAN_COMMUNICATION_SLOW_ONE_SHOT_MSG;
  canSlowCycleBCM.frame[SLOW_CAN_COMMUNICATION_SLOW_ONE_SHOT_MSG_FRAME_INDEX].can_dlc = 4U;
  memset(canSlowCycleBCM.frame[SLOW_CAN_COMMUNICATION_SLOW_ONE_SHOT_MSG_FRAME_INDEX].data, 0U, MAX_MESSAGE_LENGTH);
  canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].can_id = SYSTEM_CAN_MESSAGE_TELEMETRY_TELEMETRY;
  canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].can_dlc = 8U;
  memset(canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].data, 0U, MAX_MESSAGE_LENGTH);

  if (write(m_bcmCanSocket, &canSlowCycleBCM, sizeof(canSlowCycleBCM)) < 0) {
    throw std::runtime_error("Failed to schedule CAN BCM Slow cycle messages");
  }
}

void CanScheduler::startCanScheduler() {
  try {
    m_bcmCanSocket = socket(PF_CAN, SOCK_DGRAM, CAN_BCM);

    if (m_bcmCanSocket < 0) {
      throw std::runtime_error("Error creating socket for CAN Broadcast Manager");
    }

    struct ifreq ifr;
    snprintf(ifr.ifr_name, sizeof(ifr.ifr_name), "%s", CAN_INTERFACE_NAME.c_str());
    if (ioctl(m_bcmCanSocket, SIOCGIFINDEX, &ifr) < 0) {
      throw std::runtime_error("Error writing interface name to socketCAN file descriptor. Check if vcan0 is enabled?");
    }

    struct sockaddr_can addr = {};
    addr.can_family = AF_CAN;
    addr.can_ifindex = ifr.ifr_ifindex;

    if (connect(m_bcmCanSocket, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
      throw std::runtime_error("Error connecting to SocketCAN broadcast manager");
    }

    scheduleCanMessages();
  } catch (std::exception &e) {
    std::cerr << "Error running CAN Scheduler: " << e.what() << std::endl;
  }
}
void CanScheduler::update_test_data_fault(uint16_t fault_value) {
  try {
    unsigned int start_byte = 0;

    canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].data[start_byte + 0U] = (fault_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].data[start_byte + 1U] = (fault_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update test_data fault}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_test_data_fault_val(uint16_t fault_val_value) {
  try {
    unsigned int start_byte = 2;

    canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].data[start_byte + 0U] = (fault_val_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].data[start_byte + 1U] = (fault_val_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update test_data fault_val}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_test_data_aux_batt_v(uint16_t aux_batt_v_value) {
  try {
    unsigned int start_byte = 4;

    canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].data[start_byte + 0U] = (aux_batt_v_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].data[start_byte + 1U] = (aux_batt_v_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update test_data aux_batt_v}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_test_data_afe_status(uint8_t afe_status_value) {
  try {
    unsigned int start_byte = 6;

    canMediumCycleBCM.frame[MEDIUM_REAR_CONTROLLER_TEST_DATA_FRAME_INDEX].data[start_byte + 0U] = (afe_status_value >> 0U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update test_data afe_status}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_gyro_data_x_axis(uint16_t x_axis_value) {
  try {
    unsigned int start_byte = 0;

    canMediumCycleBCM.frame[MEDIUM_IMU_GYRO_DATA_FRAME_INDEX].data[start_byte + 0U] = (x_axis_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_IMU_GYRO_DATA_FRAME_INDEX].data[start_byte + 1U] = (x_axis_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update gyro_data x_axis}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_gyro_data_y_axis(uint16_t y_axis_value) {
  try {
    unsigned int start_byte = 2;

    canMediumCycleBCM.frame[MEDIUM_IMU_GYRO_DATA_FRAME_INDEX].data[start_byte + 0U] = (y_axis_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_IMU_GYRO_DATA_FRAME_INDEX].data[start_byte + 1U] = (y_axis_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update gyro_data y_axis}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_gyro_data_z_axis(uint16_t z_axis_value) {
  try {
    unsigned int start_byte = 4;

    canMediumCycleBCM.frame[MEDIUM_IMU_GYRO_DATA_FRAME_INDEX].data[start_byte + 0U] = (z_axis_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_IMU_GYRO_DATA_FRAME_INDEX].data[start_byte + 1U] = (z_axis_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update gyro_data z_axis}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_accel_data_x_axis(uint16_t x_axis_value) {
  try {
    unsigned int start_byte = 0;

    canMediumCycleBCM.frame[MEDIUM_IMU_ACCEL_DATA_FRAME_INDEX].data[start_byte + 0U] = (x_axis_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_IMU_ACCEL_DATA_FRAME_INDEX].data[start_byte + 1U] = (x_axis_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update accel_data x_axis}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_accel_data_y_axis(uint16_t y_axis_value) {
  try {
    unsigned int start_byte = 2;

    canMediumCycleBCM.frame[MEDIUM_IMU_ACCEL_DATA_FRAME_INDEX].data[start_byte + 0U] = (y_axis_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_IMU_ACCEL_DATA_FRAME_INDEX].data[start_byte + 1U] = (y_axis_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update accel_data y_axis}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_accel_data_z_axis(uint16_t z_axis_value) {
  try {
    unsigned int start_byte = 4;

    canMediumCycleBCM.frame[MEDIUM_IMU_ACCEL_DATA_FRAME_INDEX].data[start_byte + 0U] = (z_axis_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_IMU_ACCEL_DATA_FRAME_INDEX].data[start_byte + 1U] = (z_axis_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update accel_data z_axis}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_fast_one_shot_msg_sig1(uint16_t sig1_value) {
  try {
    unsigned int start_byte = 0;

    canFastCycleBCM.frame[FAST_CAN_COMMUNICATION_FAST_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 0U] = (sig1_value >> 0U) & 0xFFU;
    canFastCycleBCM.frame[FAST_CAN_COMMUNICATION_FAST_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 1U] = (sig1_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canFastCycleBCM, sizeof(canFastCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update fast_one_shot_msg sig1");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_fast_one_shot_msg_sig2(uint16_t sig2_value) {
  try {
    unsigned int start_byte = 2;

    canFastCycleBCM.frame[FAST_CAN_COMMUNICATION_FAST_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 0U] = (sig2_value >> 0U) & 0xFFU;
    canFastCycleBCM.frame[FAST_CAN_COMMUNICATION_FAST_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 1U] = (sig2_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canFastCycleBCM, sizeof(canFastCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update fast_one_shot_msg sig2");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_medium_one_shot_msg_sig1(uint16_t sig1_value) {
  try {
    unsigned int start_byte = 0;

    canMediumCycleBCM.frame[MEDIUM_CAN_COMMUNICATION_MEDIUM_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 0U] = (sig1_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_CAN_COMMUNICATION_MEDIUM_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 1U] = (sig1_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update medium_one_shot_msg sig1}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_medium_one_shot_msg_sig2(uint16_t sig2_value) {
  try {
    unsigned int start_byte = 2;

    canMediumCycleBCM.frame[MEDIUM_CAN_COMMUNICATION_MEDIUM_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 0U] = (sig2_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_CAN_COMMUNICATION_MEDIUM_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 1U] = (sig2_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update medium_one_shot_msg sig2}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_slow_one_shot_msg_sig1(uint16_t sig1_value) {
  try {
    unsigned int start_byte = 0;

    canSlowCycleBCM.frame[SLOW_CAN_COMMUNICATION_SLOW_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 0U] = (sig1_value >> 0U) & 0xFFU;
    canSlowCycleBCM.frame[SLOW_CAN_COMMUNICATION_SLOW_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 1U] = (sig1_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canSlowCycleBCM, sizeof(canSlowCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update slow_one_shot_msg sig1");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_slow_one_shot_msg_sig2(uint16_t sig2_value) {
  try {
    unsigned int start_byte = 2;

    canSlowCycleBCM.frame[SLOW_CAN_COMMUNICATION_SLOW_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 0U] = (sig2_value >> 0U) & 0xFFU;
    canSlowCycleBCM.frame[SLOW_CAN_COMMUNICATION_SLOW_ONE_SHOT_MSG_FRAME_INDEX].data[start_byte + 1U] = (sig2_value >> 8U) & 0xFFU;
    if (write(m_bcmCanSocket, &canSlowCycleBCM, sizeof(canSlowCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update slow_one_shot_msg sig2");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_steering_state_target_velocity(uint32_t target_velocity_value) {
  try {
    unsigned int start_byte = 0;

    canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].data[start_byte + 0U] = (target_velocity_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].data[start_byte + 1U] = (target_velocity_value >> 8U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].data[start_byte + 2U] = (target_velocity_value >> 16U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].data[start_byte + 3U] = (target_velocity_value >> 24U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update steering_state target_velocity}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_steering_state_drive_state(uint8_t drive_state_value) {
  try {
    unsigned int start_byte = 4;

    canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].data[start_byte + 0U] = (drive_state_value >> 0U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update steering_state drive_state}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_steering_state_cruise_control(uint8_t cruise_control_value) {
  try {
    unsigned int start_byte = 5;

    canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].data[start_byte + 0U] = (cruise_control_value >> 0U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update steering_state cruise_control}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_steering_state_regen_braking(uint8_t regen_braking_value) {
  try {
    unsigned int start_byte = 6;

    canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].data[start_byte + 0U] = (regen_braking_value >> 0U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update steering_state regen_braking}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_steering_state_hazard_enabled(uint8_t hazard_enabled_value) {
  try {
    unsigned int start_byte = 7;

    canMediumCycleBCM.frame[MEDIUM_STEERING_STEERING_STATE_FRAME_INDEX].data[start_byte + 0U] = (hazard_enabled_value >> 0U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update steering_state hazard_enabled}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_telemetry_telemetry_data(uint64_t telemetry_data_value) {
  try {
    unsigned int start_byte = 0;

    canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].data[start_byte + 0U] = (telemetry_data_value >> 0U) & 0xFFU;
    canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].data[start_byte + 1U] = (telemetry_data_value >> 8U) & 0xFFU;
    canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].data[start_byte + 2U] = (telemetry_data_value >> 16U) & 0xFFU;
    canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].data[start_byte + 3U] = (telemetry_data_value >> 24U) & 0xFFU;
    canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].data[start_byte + 4U] = (telemetry_data_value >> 32U) & 0xFFU;
    canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].data[start_byte + 5U] = (telemetry_data_value >> 40U) & 0xFFU;
    canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].data[start_byte + 6U] = (telemetry_data_value >> 48U) & 0xFFU;
    canSlowCycleBCM.frame[SLOW_TELEMETRY_TELEMETRY_FRAME_INDEX].data[start_byte + 7U] = (telemetry_data_value >> 56U) & 0xFFU;
    if (write(m_bcmCanSocket, &canSlowCycleBCM, sizeof(canSlowCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update telemetry telemetry_data");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_front_controller_pedal_data_percentage(uint32_t percentage_value) {
  try {
    unsigned int start_byte = 0;

    canMediumCycleBCM.frame[MEDIUM_FRONT_CONTROLLER_FRONT_CONTROLLER_PEDAL_DATA_FRAME_INDEX].data[start_byte + 0U] = (percentage_value >> 0U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_FRONT_CONTROLLER_FRONT_CONTROLLER_PEDAL_DATA_FRAME_INDEX].data[start_byte + 1U] = (percentage_value >> 8U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_FRONT_CONTROLLER_FRONT_CONTROLLER_PEDAL_DATA_FRAME_INDEX].data[start_byte + 2U] = (percentage_value >> 16U) & 0xFFU;
    canMediumCycleBCM.frame[MEDIUM_FRONT_CONTROLLER_FRONT_CONTROLLER_PEDAL_DATA_FRAME_INDEX].data[start_byte + 3U] = (percentage_value >> 24U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update front_controller_pedal_data percentage}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
void CanScheduler::update_front_controller_pedal_data_brake_enabled(uint8_t brake_enabled_value) {
  try {
    unsigned int start_byte = 4;

    canMediumCycleBCM.frame[MEDIUM_FRONT_CONTROLLER_FRONT_CONTROLLER_PEDAL_DATA_FRAME_INDEX].data[start_byte + 0U] = (brake_enabled_value >> 0U) & 0xFFU;
    if (write(m_bcmCanSocket, &canMediumCycleBCM, sizeof(canMediumCycleBCM)) < 0) {
      throw std::runtime_error("Failed to update front_controller_pedal_data brake_enabled}");
    }
  } catch (std::exception &e) {
    std::cerr << e.what() << std::endl;
  }
}
